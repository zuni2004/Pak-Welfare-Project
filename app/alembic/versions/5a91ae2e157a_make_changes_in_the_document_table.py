"""Make changes in the Document table

Revision ID: 5a91ae2e157a
Revises: 2c1faae326e9
Create Date: 2025-08-19 13:20:20.689562

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "5a91ae2e157a"
down_revision: Union[str, None] = "2c1faae326e9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Get database connection
    conn = op.get_bind()

    # Check and create nationality_enum if it doesn't exist
    nationality_exists = conn.execute(
        sa.text("SELECT 1 FROM pg_type WHERE typname = 'nationality_enum'")
    ).fetchone()

    if not nationality_exists:
        nationality_enum = postgresql.ENUM(
            "PAKISTANI", "SAUDI", name="nationality_enum"
        )
        nationality_enum.create(conn)

    # Check and create document_type_enum if it doesn't exist
    doc_type_exists = conn.execute(
        sa.text("SELECT 1 FROM pg_type WHERE typname = 'document_type_enum'")
    ).fetchone()

    if not doc_type_exists:
        document_type_enum = postgresql.ENUM(
            "NICOP", "PASSPORT", "IQAMA", "SAUDI_NATIONAL_ID", name="document_type_enum"
        )
        document_type_enum.create(conn)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "documents",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("document_url", sa.String(length=500), nullable=False),
        sa.Column("guest_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("noc_application_id", sa.UUID(), nullable=True),
        sa.Column(
            "nationality",
            postgresql.ENUM(
                "PAKISTANI", "SAUDI", name="nationality_enum", create_type=False
            ),
            nullable=False,
        ),
        sa.Column(
            "type",
            postgresql.ENUM(
                "NICOP",
                "PASSPORT",
                "IQAMA",
                "SAUDI_NATIONAL_ID",
                name="document_type_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["guest_id"],
            ["guest.id"],
        ),
        sa.ForeignKeyConstraint(
            ["noc_application_id"],
            ["noc_application.tracking_number"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("documents")

    # Optionally drop the ENUM types if they're not used elsewhere
    # Be careful with this - only uncomment if you're sure these ENUMs aren't used in other tables
    # conn = op.get_bind()
    # conn.execute(sa.text("DROP TYPE IF EXISTS document_type_enum CASCADE"))
    # conn.execute(sa.text("DROP TYPE IF EXISTS nationality_enum CASCADE"))
    # ### end Alembic commands ###
