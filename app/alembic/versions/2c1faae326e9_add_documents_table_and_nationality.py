"""Add documents table and nationality

Revision ID: 2c1faae326e9
Revises: 9e29655509e1
Create Date: 2025-08-19 12:43:17.819552

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "2c1faae326e9"
down_revision: Union[str, None] = "9e29655509e1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tracking_application")

    # Create ENUM type before altering column
    nationality_enum = sa.Enum("pakistani", "saudi", name="nationality_enum")
    nationality_enum.create(op.get_bind(), checkfirst=True)

    op.alter_column(
        "guest",
        "nationality",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("pakistani", "saudi", name="nationality_enum"),
        nullable=False,
        postgresql_using="nationality::text::nationality_enum",
    )

    op.drop_column("guest", "ip_address")
    op.alter_column(
        "service_types",
        "name",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=250),
        existing_nullable=False,
    )
    op.alter_column(
        "service_types",
        "description",
        existing_type=sa.TEXT(),
        type_=sa.String(length=2000),
        existing_nullable=True,
    )
    op.drop_index(op.f("ix_service_types_slug"), table_name="service_types")
    op.create_index(op.f("ix_service_types_id"), "service_types", ["id"], unique=False)
    op.drop_column("service_types", "slug")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "service_types",
        sa.Column("slug", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.drop_index(op.f("ix_service_types_id"), table_name="service_types")
    op.create_index(
        op.f("ix_service_types_slug"), "service_types", ["slug"], unique=True
    )
    op.alter_column(
        "service_types",
        "description",
        existing_type=sa.String(length=2000),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "service_types",
        "name",
        existing_type=sa.String(length=250),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.add_column(
        "guest",
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
    )
    op.alter_column(
        "guest",
        "nationality",
        existing_type=sa.Enum("pakistani", "saudi", name="nationality_enum"),
        type_=sa.VARCHAR(),
        nullable=True,
    )

    # Drop ENUM type on downgrade
    sa.Enum("PAKISTANI", "SAUDI", name="nationality_enum").drop(
        op.get_bind(), checkfirst=True
    )

    op.create_table(
        "tracking_application",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "noc_tracking_number", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("guest_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("note", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "is_guest_application", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["guest_id"], ["guest.id"], name=op.f("tracking_application_guest_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["noc_tracking_number"],
            ["noc_application.tracking_number"],
            name=op.f("tracking_application_noc_tracking_number_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("tracking_application_pkey")),
        sa.UniqueConstraint(
            "guest_id",
            name=op.f("tracking_application_guest_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        sa.UniqueConstraint(
            "noc_tracking_number",
            name=op.f("tracking_application_noc_tracking_number_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    # ### end Alembic commands ###
